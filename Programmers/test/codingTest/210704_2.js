/*
어떤 빌딩에 엘리베이터가 운행되도록 공사를 하려고 합니다. 빌딩의 각 층마다 엘리베이터가 운행되도록 하기 위한 공사 비용은 다를 수 있습니다. 아래 그림은 8층으로 이루어진 빌딩에 엘리베이터가 운행되도록 하기 위한 비용을 나타냅니다.

elev1.png

0으로 표시된 1층, 3층, 6층은 이미 공사가 완료되어 추가적인 비용이 필요하지 않음을 나타냅니다.
나머지 층은 엘리베이터가 운행되려면 공사 비용이 발생합니다.
2층 : 900원, 4층 : 200원, 5층 : 150원, 7층 : 30원, 8층 : 50원
당신은 주어진 예산으로 가장 긴 연속된 층에서 엘리베이터가 운행되도록 공사를 하려고 합니다. 예를 들어, 위 그림에서 주어진 예산이 420원이라면 그림에서 회색으로 색칠된 5개의 연속된 층(3층~7층)에서 엘리베이터가 운행되도록 공사할 수 있습니다. 3층~7층 구간을 공사하는데 필요한 총비용은 380원(=200 + 150+ 30)이며, 이 금액은 주어진 예산(420원) 이하이기 때문입니다.

사용할 수 있는 예산 money, 빌딩의 각 층별로 필요한 공사 비용 cost가 매개변수로 주어집니다. 이때, 주어진 예산 내에서 엘리베이터가 운행되도록 공사할 수 있는 가장 긴 연속된 층의 길이를 구해서 return 하도록 solution 함수를 완성해주세요.

제한사항
money는 0 이상 500,000,000 이하인 정수입니다.
cost는 정수형 배열이며, 길이(=빌딩의 층 수)는 1 이상 500,000 이하입니다.
cost의 모든 원소는 0 이상 1,000 이하인 정수입니다.
cost[i] 는 i + 1층에 필요한 공사 비용입니다.
420	[0, 900, 0, 200, 150, 0, 30, 50]	5
100	[245, 317, 151, 192]	0
*/

function solution(money, cost) {
    var rangeArr=[];
    for(var i=0;i<cost.length;i++){
        var range = cost.length-i;
        var costSum = sumArr(i,cost);
        for(var j=cost.length-1;j>=0;j--){
            if(costSum<money){
                rangeArr.push(range);
            }
            costSum-=cost[j];
            range-=1;
        }
    }

    return Math.max.apply(null, rangeArr);
}
function sumArr(idx,cost){
    var sum = 0;
    for(i=idx;i<cost.length;i++){
        sum+=cost[i]
    }
    return sum;
}
console.log(" "+solution(420,[0, 900, 0, 200, 150, 0, 30, 50]),5)
console.log(solution(100,[245, 317, 151, 192]),0)