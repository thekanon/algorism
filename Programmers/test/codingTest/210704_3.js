/*
삼트리스 게임을 하려고 합니다. 삼트리스는 6가지 블록을 차곡차곡 쌓았을 때 가로 방향으로 한 줄을 빈틈없이 채우면 해당 줄이 없어지는 게임입니다.

6가지 블록은 다음과 같습니다(각 블록은 회전이 불가능합니다).

sam_1.png

다음은 초기 게임 화면과 놓아야 할 블록이 주어졌을 때, 각 블록으로 줄을 가장 많이 없애는 예시입니다.

sam_2.png

위 예시와 같이 초기 게임 화면의 상태에 따라서, 블록별로 어느 위치에 놓느냐에 따라 없앨 수 있는 줄의 개수가 달라집니다. 초기 게임 화면과 놓아야 할 블록이 주어졌을 때, 주어진 블록을 이용해서 최대 몇 줄을 없앨 수 있는지 구하려고 합니다.

단, 줄을 없앤 후 남은 블록은 다음과 같이 놓이기 때문에 연속해서 줄이 없어지는 경우는 없습니다.

sam_3.png

초기 게임 화면 board는 2차원 배열로 주어지며, 블록이 놓여있는 자리는 숫자 1, 빈자리는 숫자 0으로 표시합니다.

위의 예시에서는 다음과 같이 표시됩니다.

sam_4.png

즉, board=[[1,0,0,0],[1,0,0,1],[1,1,0,1],[1,1,0,1]]로 표시 됩니다.

현재 놓아야 할 블록의 번호 block과 초기 게임 화면 board가 매개변수로 주어질 때, 현재 게임화면에서 주어진 블록을 놓아 없앨 수 있는 최대 줄의 수를 return 하도록 solution 함수를 완성해주세요. 단, 블록은 게임 화면을 벗어나도록 놓을 수 없으며, 주어진 블록을 놓을 수 없거나, 혹은 어느 자리에 놓더라도 줄을 없앨 수 없는 경우에는 0을 return 해주세요.

제한사항
초기 게임 화면 board는 2차원 배열이며, 0 또는 1로만 이루어져 있습니다.
초기 게임 화면의 가로, 세로 길이는 같고, 3 이상 8 이하의 자연수입니다.
초기 게임 화면에서 가로 방향으로 한 줄 이상이 이미 채워져 있는 경우는 주어지지 않습니다.
block은 놓아야 할 블록의 번호를 나타내며 0부터 5까지의 수로 이루어져 있습니다.

1. 해당 블럭이 들어갈 수 있는 위치 구함
    1. 모든 블럭 유형에 대하여 계산값을 정리함.

2. 들어갔을때 남는 공간이 있는지 체크함
2. 들어갔을때 라인이 지워지는 갯수 카운트함
3. 최대값을 출력함.


*/
function solution(block,board) {
    var answer = -1;
    return answer;
}
console.log(solution(0,[[1,0,0,0],[1,0,0,1],[1,1,0,1],[1,1,0,1]],2))